import unittest
from app.game.game import Game

import random

class TestGameOver(unittest.TestCase):

	def setUp(self):
		self.game = Game()

	def test_new_game_not_over(self):
		self.expect(False)

	def test_win(self):
		self.make_non_winning_moves([[10, 14], [23, 18], [14, 23], [26, 19], [11, 15], [19, 10], [6, 15], [22, 18], [15, 22], [25, 18], [9, 13], [21, 17], [13, 22],
			[31, 26], [22, 31], [24, 19], [31, 24], [24, 15], [15, 22], [29, 25], [22, 29], [30, 25], [29, 22], [28, 24], [12, 16], [32, 27], [16, 20], [27, 23],
			[20, 27], [23, 18]])

		self.move([22, 15]).expect(True)

	def test_draw(self):
		self.make_non_winning_moves([[9, 13], [22, 17], [13, 22], [26, 17], [10, 14], [17, 10], [7, 14], [23, 18], [14, 23], [27, 18], [12, 16], [18, 15], [11, 18],
			[25, 22], [18, 25], [29, 22], [6, 9], [21, 17], [9, 13], [30, 26], [5, 9], [31, 27], [16, 20], [22, 18], [13, 22], [22, 31], [18, 15], [31, 26], [24, 19],
			[1, 5], [15, 10], [8, 11], [10, 6], [4, 8], [6, 1], [2, 6], [1, 10], [9, 14], [10, 17], [20, 24], [27, 20], [26, 31], [19, 16], [8, 12], [16, 7], [3, 10],
			[20, 16], [12, 19], [17, 13], [5, 9], [13, 6], [6, 15], [15, 24], [31, 26], [24, 19], [26, 30], [32, 27], [30, 26], [19, 16], [26, 22], [27, 23], [22, 17],
			[23, 18], [17, 13], [18, 14], [13, 17], [16, 19], [17, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19], [14, 10],
			[19, 16], [10, 14], [16, 19], [14, 10], [19, 16], [10, 14], [16, 19]])

		self.move([14, 10]).expect(True)

	def make_non_winning_moves(self, moves):
		for move in moves:
			self.move(move).expect(False)

	def move(self, move):
		self.game.move(move);
		return self

	def expect(self, value):
		self.assertEqual(self.game.is_over(), value);